apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'

archivesBaseName = 'CustomEnchantments'
group = 'adx.audioxd.enchantments'
version = '1.0'
def MainClass = group + '.' + archivesBaseName

def delete_on_upload = false

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    compile(group: 'org.spigotmc', name: 'spigot-api', version: '1.8-R0.1-SNAPSHOT') {
        // Because the bungeecord-chat.jar isn't being found
        transitive = false
    }
    compile group: 'org.bukkit', name: 'bukkit', version: '1.8-R0.1-SNAPSHOT'

    // To the folder where the CustomEnchantmentAPI.jar is
    compile fileTree(dir: '../CustomEnchantmentAPI/output/latest', include: '*.jar')

    testCompile 'junit:junit:4.12'
}

// To process the plugin.yml file for ease of access
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'plugin.yml'

        expand 'plugin_name': archivesBaseName,
                'plugin_version': version,
                'plugin_main': MainClass
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'plugin.yml'
        exclude '**/*.dev'
    }
}

// Where to upload the output Files
uploadArchives {
    repositories {
        flatDir {
            dirs '/output/' + version
        }
    }
    repositories {
        flatDir {
            dirs '/output/latest'
        }
    }
}

/* ********************************************************************************* */
/*                          [For my personal use]                                    */
/* ********************************************************************************* */
tasks.uploadArchives.dependsOn(clean)
// Deletes every file except .gitignore
clean.doFirst {
    if (file("/output/latest").exists() && delete_on_upload) {
        new File(rootDir, "/output/latest").eachFile() { file ->
            if (!file.getName().equalsIgnoreCase(".gitignore")) {
                delete file.getPath()
            }
        }
    }
}
uploadArchives {
    repositories {
        flatDir {
            dirs '../_extra/CE'
        }
        flatDir {
            dirs '../_extra/run/plugins'
        }
    }
}

// This for generating the gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}